$x = "It Works! YAY";

$y = 0;

for($y = 0; $y < 10; $y++)
{
    print($y);
}

function includeTest($z)
{
    print("INCLUDE TEST");
    print("---");
    print($z);
    print($y);
    print("---");
}

function constTest()
{
    print("CONST TEST");
    print("---");
    const $xw = 123;
    print($xw);

    assert $xw == 123;

    print("---");
}

function arrayTest()
{
    print("ARRAY TEST");
    print("---");
    $r = [10];

    $r[3] = 12;

    $r[0] = 1 * 2 + $r[3] * 4;

    $r[4] = [20];

    $r[4][15] = 12345;

    $b = $r[3];

    $a = $r[4][15];

    $d = $r[0];

    print($r);
    print($b);
    print($a);
    print($d);

    assert $r[3] == 12;
    assert $r[4][15] == 12345;

    $s = [3];
    $s[0] = 1;
    $s[1] = 2;
    $s[2] = 3;

    $t = [3];
    $t[0] = 4;
    $t[1] = 5;
    $t[2] = 6;

    assert (($s + $t) as string) == "123456";

    assert ($s + 123)[3] == 123;
    assert ($s + "456")[1] == 2;

    print("---");
}

function stringTest()
{
    print("STRING TEST");
    print("---");

    $d = "This is an interned string!";
    print($d);
    assert $d == "This is an interned string!";

    $e = " Ain't this great?";
    assert ($d + $e) == "This is an interned string! Ain't this great?";

    assert ("123" + "456" + "789") == "123456789";
	assert ("123" + "456" + "789")[3] == "4";
	assert ("123" + "456")[3] == "4";
	assert $e[3] == "n";

    print("---");
}

$y = 123;

function moveToLocalTest()
{
    print("MOVE TO LOCAL TEST");
    print("---");

    $e = $y;
    print($y);
    assert $e == $y;

    $e = 0;
    $y = $e;
    print($y);
    print($e);
    assert $e == $y;

    print("---");
}

function dataTypeTest()
{
    print("DATA TYPE TEST");
    print("---");
    $a = float;
    $b = 3.75;
    print($a);
    print($b);
    print($b is int);

    assert !($b is int);

    $d = int;
    $c = $b as $d;
    print($d);
    print($c);
    print($b);

    assert $c == 3;

    assert (123 as int) == 123;
    assert (123 as string) == "123";
    assert (123 as array)[0] == 123;
    assert (123 as float) == 123.00;
    assert (123 as type) == int;

    assert (123.45 as float) == 123.45;
    assert (123.45 as string) == "123.45";
    assert (123.45 as array)[0] == 123.45;
    assert (123.45 as int) == 123;
    assert (123.45 as type) == float;

    $rep = [2];
    $rep[0] = 456;
    $rep[1] = 789;

    assert ($rep as array)[0] == $rep[0];
    assert ($rep as array)[0] == 456;
    assert ($rep as int) == 2;
    assert ($rep as float) == 2.00;
    assert ($rep as string) == "456789";
    assert ($rep as type) == array;

    assert (array as array)[0] == array;
    assert (array as type) == type;
    assert (array as string) == "array";

    assert ("6664" as int) == 6664;
    assert ("567.123" as float) == 567.123;
    assert ("45.123" as int) == 45;
    assert ("doop" as array)[2] == "o";
    assert ("str" as type) == string;
    assert ("str" as string) == "str";
    assert ("print" as function) == @print;

	$x = @dataTypeTest as coroutine;
	assert ($x as function) == @dataTypeTest;
	assert ($x as string) == "dataTypeTest";
	assert (($x as coroutine) as function) == @dataTypeTest;
	assert ($x as coroutine) != $x;
	assert ($x as coroutine) is coroutine;

    print("---");
}

function funcPointerTestChild($b, $c)
{
    print("HUZZAH!");
    return $b + $c;
}

$rtygh = function()
{
    print("DOOP");
};

function funcPointerTest()
{
    print("function pointer test");
    print("---");

    $a = @funcPointerTestChild;
    $b = 123;
    $c = 456;
    $d = $a($b, $c);
    $e = @print;
    $f = [10];
    $f[5] = [12];
    $f[5][2] = @print;

    assert $d == $b + $c;
    assert $a == @funcPointerTestChild;
    assert $e == @print;
    assert $f[5][2] == $e;

    $e($a);
    $e($b);
    $e($c);
    $e($d);
    $e($e);
    $f[5][2]($f[5][2]);
    @print($d);
    @print(function);

    $g = function($rt, $as, $we)
    {
        print("GOOD LORD!");
        return $rt + $as + $we;
    };

    assert $g(456, 789, 123) == 456 + 789 + 123;
    assert function($zxc, $vbn) { return $zxc - $vbn; }(10, 5) == 10 - 5;

    $rtygh();

    print("---");
}

function generatorTest($start, $end)
{
    for($i = $start; $i < $end; $i++)
    {
        return $i + $start + $end;
    }

    return 0;
}

function coroutineTest()
{
	print("coroutine test");
	print("---");

    $co = @generatorTest as coroutine;
    $start = 11;
    $end = 20;
    $maxLoops = $end - $start;

	print("loop 1");

    for($numLoops = 0; $val = $co($start, $end); $numLoops++)
    {
        print($val);
		assert $val == ($start + $numLoops + $start + $end);
    }

	print("loop 2");

	for($numLoops = 0; $val = $co($start, $end); $numLoops++)
    {
        print($val);
		assert $val == ($start + $numLoops + $start + $end);
    }

    assert $numLoops == $maxLoops;
    assert $val == 0;

	print("---");
}