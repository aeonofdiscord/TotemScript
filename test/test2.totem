var $x = "It Works! YAY";

var $y = 0;

for($y = 0; $y < 10; $y++)
{
    var $sgdghdf = 1;
    //print($y);
}

function includeTest(var $z)
{
    print("INCLUDE TEST");
    print("---");
    print($z);
    print($y);
    print("---");
}

function constTest()
{
    print("CONST TEST");
    print("---");
    let $xw = 123;
    print($xw);

    assert($xw == 123);

    print("---");
}

function arrayTest()
{
    print("ARRAY TEST");
    print("---");
    var $r = [10];

    $r[3] = 12;

    $r[0] = 1 * 2 + $r[3] * 4;

    $r[4] = [20];

    $r[4][15] = 12345;

    var $b = $r[3];

    var $a = $r[4][15];

    var $d = $r[0];

    print($r);
    print($b);
    print($a);
    print($d);

    assert($r[3] == 12);
    assert($r[4][15] == 12345);

    var $s = [3];
    $s[0] = 1;
    $s[1] = 2;
    $s[2] = 3;

    var $t = [3];
    $t[0] = 4;
    $t[1] = 5;
    $t[2] = 6;

    assert((($s + $t) as string) == "123456");

    print("---");
}

function stringTest()
{
    print("STRING TEST");
    print("---");

    var $d = "This is an interned string!";
    print($d);
    assert($d == "This is an interned string!");

    var $e = " Ain't this great?";
    assert(($d + $e) == "This is an interned string! Ain't this great?");

    assert(("123" + "456" + "789") == "123456789");
    assert(("123" + "456" + "789")[3] == "4");
    assert(("123" + "456")[3] == "4");
    assert($e[3] == "n");

    print("---");
}

$y = 123;

function moveToLocalTest()
{
    print("MOVE TO LOCAL TEST");
    print("---");

    var $e = $y;
    print($y);
    assert($e == $y);

    $e = 0;
    $y = $e;
    //print($y);
    //print($e);
    assert($e == $y);

    print("---");
}

function dataTypeTest()
{
    print("DATA TYPE TEST");
    print("---");
    var $a = float;
    var $b = 3.75;
    print($a);
    print($b);
    print($b is int);

    assert(!($b is int));

    var $d = int;
    var $c = $b as $d;
    print($d);
    print($c);
    print($b);

    assert($c == 3);

    assert((123 as int) == 123);
    assert((123 as string) == "123");
    assert((123 as array)[0] == 123);
    assert((123 as float) == 123.00);
    assert((123 as type) == int);

    assert((123.45 as float) == 123.45);
    assert((123.45 as string) == "123.45");
    assert((123.45 as array)[0] == 123.45);
    assert((123.45 as int) == 123);
    assert((123.45 as type) == float);

    var $rep = [2];
    $rep[0] = 456;
    $rep[1] = 789;

    assert(($rep as array)[0] == $rep[0]);
    assert(($rep as array)[0] == 456);
    assert(($rep as int) == 2);
    assert(($rep as float) == 2.00);
    assert(($rep as string) == "456789");
    assert(($rep as type) == array);

    assert((array as array)[0] == array);
    assert((array as type) == type);
    assert((array as string) == "array");
    assert(((array as array) as int) == 1);
    assert(((array as array) as float) == 1.0);

    assert(("6664" as int) == 6664);
    assert(("567.123" as float) == 567.123);
    assert(("45.123" as int) == 45);
    assert(("doop" as array)[2] == "o");
    assert(("str" as type) == string);
    assert(("str" as string) == "str");
    assert(("print" as function) == @print);

    var local $x = @dataTypeTest as coroutine;
    assert(($x as function) == @dataTypeTest);
    assert(($x as string) == "dataTypeTest");
    assert((($x as coroutine) as function) == @dataTypeTest);
    assert(($x as coroutine) != $x);
    assert(($x as coroutine) is coroutine);

    $x = {};
    $x["what"] = 123;
    assert(($x as type) == object);
    assert(($x as int) == 1);
    assert(($x as float) == 1.0);

    print("---");
}

function funcPointerTestChild(var $b, var $c)
{
    print("HUZZAH!");
    return $b + $c;
}

let $rtygh = function()
{
    var $a = 1;
    print("DOOP");
};

function funcPointerTest()
{
    print("function pointer test");
    print("---");

    var $a = @funcPointerTestChild;
    var $b = 123;
    var $c = 456;
    var $d = $a($b, $c);
    var $e = @print;
    var $f = [10];
    $f[5] = [12];
    $f[5][2] = @print;

    assert($d == $b + $c);
    assert($a == @funcPointerTestChild);
    assert($e == @print);
    assert($f[5][2] == $e);

    $e($a);
    $e($b);
    $e($c);
    $e($d);
    $e($e);
    $f[5][2]($f[5][2]);
    @print($d);
    @print(function);

    var $g = function(var $rt, var $as, var $we)
    {
        //print("GOOD LORD!");
        return $rt + $as + $we;
    };

    assert($g(456, 789, 123) == 456 + 789 + 123);
    assert(function(var $zxc, var $vbn) { return $zxc - $vbn; }(10, 5) == 10 - 5);

    $rtygh();

    print("---");
}

function generatorTest(var $start, var $end)
{
    for(var $i = $start; $i < $end; $i++)
    {
        return $i + $start + $end;
    }

    return 0;
}

function coroutineTest()
{
    print("coroutine test");
    print("---");

    var $co = @generatorTest as coroutine;
    var $start = 11;
    var $end = 20;
    var $maxLoops = $end - $start;

    //print("loop 1");

    for(var $numLoops = 0; var $val = $co($start, $end); $numLoops++)
    {
        //print($val);
        assert($val == ($start + $numLoops + $start + $end));
    }

    //print("loop 2");

    for($numLoops = 0; $val = $co($start, $end); $numLoops++)
    {
        //print($val);
        assert($val == ($start + $numLoops + $start + $end));
    }

    assert($numLoops == $maxLoops);
    assert($val == 0);

    print("---");
}

function objectTest()
{
    print("object test");
    print("---");

    var local $obj = {};
    $obj["test"] = 123;
    $obj["test2"] = 456;
    $obj["test3"] = 789;
    var $a = $obj["test"];
    var $b = $obj["test2"];
    var $c = $obj["test3"];

    $obj["test4"] = {};
    $obj["test4"]["what"] = "hello!";
    var $d = $obj["test4"]["what"];

    $obj["test5"] = [2];
    $obj["test5"][1] = "Doop!";

    assert($obj["test"] == $a);
    assert($obj["test2"] == $b);
    assert($obj["test3"] == $c);

    assert($obj["test4"] is object);
    assert($obj["test4"]["what"] == $d);
    assert($obj["test5"] is array);
    assert($obj["test5"][1] == "Doop!");

    assert($a == 123);
    assert($b == 456);
    assert($c == 789);
    assert($d == "hello!");

    $obj.invoke = function(var $a, var $b) { return $a + $b; };
    assert($obj.invoke(123, 456) == 123 + 456);

    print($obj);
    print("---");
}

function userDataTest()
{
    print("userdata test");
    print("---");

    var $file = fopen();
    var $test = $file;
    assert($file is userdata);

    $file = 123;
    assert($file is int);
    assert($test is userdata);

    print("---");
}

function localTest()
{
    var local $y = "This is a string!";
    print($y);
}

function refCycleTest()
{
    print("ref cycle test");
    print("---");

    var local $y = [1];
    $y[0] = [1];
    $y[0][0] = $y;

    print("---");
}